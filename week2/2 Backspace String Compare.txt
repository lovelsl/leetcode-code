Backspace String Compare
Solution
	Given two strings S and T, return if they are equal when both are typed into empty text editors. # means a backspace character.
	Note that after backspacing an empty text, the text will continue empty.
Example 1:
	Input: S = "ab#c", T = "ad#c"
	Output: true
	Explanation: Both S and T become "ac".
Example 2:
	Input: S = "ab##", T = "c#d#"
	Output: true
	Explanation: Both S and T become "".
Example 3:
	Input: S = "a##c", T = "#a#c"
	Output: true
	Explanation: Both S and T become "c".
Example 4:
	Input: S = "a#c", T = "b"
	Output: false
	Explanation: S becomes "c" while T becomes "b".
Note:
	1 <= S.length <= 200
	1 <= T.length <= 200
	S and T only contain lowercase letters and '#' characters.
Follow up:
	Can you solve it in O(N) time and O(1) space?


JAVA:

import  java.util.Stack;

public class Solution {

	public boolean backspaceCompare(String S, String T) {
		
		Stack<Character> sc = new Stack<Character>();
		Stack<Character> t = new Stack<Character>();
		
		if(T==null || S==null) {
			return false;
		}
		
		for(int i=0; i<S.length(); i++) {
			System.out.println(" >>" + S.charAt(i));
			if(S.charAt(i) != '#') {
				sc.push(S.charAt(i));
			}else {
				if(i==0 && S.charAt(i) == '#') {
					;
				}else {
					if(!sc.isEmpty()) {
						sc.pop();
					}
				}
			}
		}
		
		for(int j=0; j<T.length(); j++) {
			if(T.charAt(j) != '#') {
				t.push(T.charAt(j));
			}else {
				if(j==0 && T.charAt(j) == '#') {
					;
				}else {
					if(!t.isEmpty()) {
						t.pop();
					}
				}
			}
		}
		

		
		while(!t.isEmpty() && !sc.isEmpty()) {
			if(t.pop() == sc.pop()) {
				continue;
			}else {
				return false;
			}
		}
		
		return t.isEmpty() == sc.isEmpty();
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String S = "a##c";
		String T = "#a#c";
		Solution obj = new Solution();
		boolean ret = obj.backspaceCompare(S, T);
		System.out.println(" >> " + ret);
		
	}

}

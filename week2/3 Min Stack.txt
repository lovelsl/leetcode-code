Min Stack
	Solution
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.
	push(x) -- Push element x onto stack.
	pop() -- Removes the element on top of the stack.
	top() -- Get the top element.
	getMin() -- Retrieve the minimum element in the stack.

 
Example 1:
Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2
 
Constraints:
Methods pop, top and getMin operations will always be called on non-empty stacks.


注意时间复杂度：

JAVA

package minstack;

import java.util.Stack;

public class MinStack {
    /** initialize your data structure here. */
	public Stack<Long> s=null;
	public Stack<Long> minS = null;
	public long min = 0;
	
    public MinStack() {
        s = new Stack<Long>();
        minS = new Stack<Long>();
    }
    
    public void push(long x) {	
    	if(s.isEmpty()) {
    		s.push(x);
    		minS.push(x);
    		min = x;
    		System.out.println("> put new min value:" + x);
    	}else {
    		s.push(x);
    		if(x <= min ) {
    			min = x;
    			minS.push(x);
    			System.out.println("put new min value:" + x);
    		}
    	}
    	
    }
    
    public void pop() {
    	if(s.isEmpty()) {
    		return ;
    	}
    	long v = s.pop();
    	if(v == min) {
    		if(!minS.isEmpty()) {
        		minS.pop();
        		if(!minS.isEmpty()) {
        			min = minS.peek();	
        		}
        				
    		}

    	}
    	//System.out.println("min value is :" + min);
    }
    
    public long top() {
    	if(s.isEmpty()) {
    		return 0;
    	}
    	long v = s.peek();
    	return v;
    }
    
    public long getMin() {
    	return min;
    }
}

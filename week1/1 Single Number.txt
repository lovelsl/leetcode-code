Single Number
	Given a non-empty array of integers, every element appears twice except for one. Find that single one.
Note:
	Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?
Example 1:
	Input: [2,2,1]
Output: 1
	Example 2:
Input: [4,1,2,1,2]
	Output: 4
	
JAVA:
package solution;

import java.util.Set;
import java.util.Arrays;
import java.util.HashSet;

public class Solution {
	public static int singleNumber(int[] nums) {
		Set<Integer> single = new HashSet<Integer>();
		
		for(int i=0; i<nums.length; i++) {
			int tmp = nums[i];
			if(single.contains(tmp)) {
				single.remove(tmp);
			}else {
				single.add(tmp);
			}
		}
		
		for(Integer i:single) {
			return i;
		}
		
		return -1;
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] nums = {4, 1, 2, 1, 2};
		int ret = singleNumber(nums);
		System.out.println("the only once num in:" + Arrays.toString(nums) + " is -> " + ret);
	}

}

Python
class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        single = set()
        
        for num in nums:
            if num in single:
                single.remove(num)
            else:
                single.add(num)
        for num in single:
            return num



Maximum Subarray
Solution
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
Example:
	Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
	Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:
	If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.



JAVA版本：
package Solution;

import java.util.Arrays;

public class Solution {

	public static int maxSubArray(int[] nums) {
		int max;
		int len = nums.length;
		int[] dp = new int[len];
		if(nums.length==0) {
			return 0;
		}
		dp[0] = nums[0]; 
		// 状态转移，求出以num[i]为最后一个数的最大子序列
		for(int i=1; i<len;i++) {
			dp[i] = Math.max(nums[i], nums[i]+dp[i-1]);
		}
		max = dp[0];
		for(int i=1; i<dp.length; i++) {
			max = Math.max(max,dp[i]);
		}
		return max;
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] nums= {-2,1,-3,4,-1,2,1,-5,4};
		int max = maxSubArray(nums);
		System.out.println("Array: "+ Arrays.toString(nums) +" max Value=" + max);
	}
}
